# Generated by ChatGPT
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MenuConfig",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("scope", models.CharField(choices=[("non_superuser", "Usuários sem superusuário")], default="non_superuser", help_text="Usuários aos quais essa configuração deve ser aplicada.", max_length=32, verbose_name="escopo")),
                ("active", models.BooleanField(default=False, help_text="Marque para tornar essa configuração a vigente para o escopo.", verbose_name="ativa")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="criada em")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="atualizada em")),
            ],
            options={
                "verbose_name": "configuração de menu",
                "verbose_name_plural": "configurações de menu",
            },
        ),
        migrations.CreateModel(
            name="MenuItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order", models.PositiveIntegerField(default=0, help_text="Menor valor aparece primeiro.", verbose_name="ordem")),
                ("item_type", models.CharField(choices=[("model", "Modelo do admin"), ("url", "Link personalizado")], max_length=12, verbose_name="tipo de item")),
                ("group_label", models.CharField(blank=True, help_text="Nome da seção a exibir no menu. Deixe vazio para usar o padrão.", max_length=100, verbose_name="grupo")),
                ("label", models.CharField(blank=True, help_text="Texto mostrado no menu. Para modelos vazios usamos o nome plural.", max_length=150, verbose_name="rótulo")),
                ("app_label", models.CharField(blank=True, help_text="Necessário para itens de modelo. Ex.: apiary.", max_length=100, verbose_name="app label")),
                ("model_name", models.CharField(blank=True, help_text="Necessário para itens de modelo. Ex.: Hive.", max_length=100, verbose_name="nome do modelo")),
                ("url_name", models.CharField(blank=True, help_text="Nome da URL para usar com reverse().", max_length=150, verbose_name="nome da URL")),
                ("absolute_url", models.URLField(blank=True, help_text="Usada como fallback quando o nome da URL não estiver disponível.", verbose_name="URL absoluta")),
                ("permission_codename", models.CharField(blank=True, help_text="Opcional. Ex.: apiary.view_hive. Apenas usuários com essa permissão verão o item.", max_length=150, verbose_name="permissão extra")),
                ("config", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="items", to="admin_menu.menuconfig", verbose_name="configuração")),
            ],
            options={
                "verbose_name": "item de menu",
                "verbose_name_plural": "itens de menu",
                "ordering": ["order", "id"],
            },
        ),
        migrations.AddConstraint(
            model_name="menuconfig",
            constraint=models.UniqueConstraint(condition=models.Q(active=True), fields=("scope",), name="unique_active_menu_per_scope"),
        ),
        migrations.AddConstraint(
            model_name="menuitem",
            constraint=models.CheckConstraint(check=models.Q(item_type="model", app_label__gt="", model_name__gt="") | models.Q(item_type="url"), name="menuitem_model_requires_target"),
        ),
        migrations.AddConstraint(
            model_name="menuitem",
            constraint=models.CheckConstraint(check=models.Q(item_type="url", url_name__gt="") | models.Q(item_type="url", absolute_url__gt="") | models.Q(item_type="model"), name="menuitem_url_requires_destination"),
        ),
    ]
